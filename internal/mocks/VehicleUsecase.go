// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	entities "go-driver-register/internal/domain/entities"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// VehicleUsecase is an autogenerated mock type for the VehicleUsecase type
type VehicleUsecase struct {
	mock.Mock
}

// AssignDriver provides a mock function with given fields: vehicleID, driverID
func (_m *VehicleUsecase) AssignDriver(vehicleID uuid.UUID, driverID uuid.UUID) error {
	ret := _m.Called(vehicleID, driverID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(vehicleID, driverID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateVehicle provides a mock function with given fields: vehicle
func (_m *VehicleUsecase) CreateVehicle(vehicle *entities.Vehicle) error {
	ret := _m.Called(vehicle)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.Vehicle) error); ok {
		r0 = rf(vehicle)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteVehicle provides a mock function with given fields: id
func (_m *VehicleUsecase) DeleteVehicle(id uuid.UUID) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllVehicles provides a mock function with given fields:
func (_m *VehicleUsecase) GetAllVehicles() ([]entities.Vehicle, error) {
	ret := _m.Called()

	var r0 []entities.Vehicle
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]entities.Vehicle, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []entities.Vehicle); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Vehicle)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVehicleByID provides a mock function with given fields: id
func (_m *VehicleUsecase) GetVehicleByID(id uuid.UUID) (entities.Vehicle, error) {
	ret := _m.Called(id)

	var r0 entities.Vehicle
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (entities.Vehicle, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) entities.Vehicle); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entities.Vehicle)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateVehicle provides a mock function with given fields: vehicle
func (_m *VehicleUsecase) UpdateVehicle(vehicle *entities.Vehicle) error {
	ret := _m.Called(vehicle)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.Vehicle) error); ok {
		r0 = rf(vehicle)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewVehicleUsecase creates a new instance of VehicleUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVehicleUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *VehicleUsecase {
	mock := &VehicleUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
